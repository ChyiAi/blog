<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[知识体系]]></title>
    <url>%2Fblog%2F2018%2F12%2F21%2Fsite_content%2F</url>
    <content type="text"><![CDATA[#主题 ##一级分支 ###二级分支 ##一级分支 ##一级分支 ###二级分支 ####三级分支]]></content>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2Fblog%2F2018%2F12%2F20%2Fredis%2F</url>
    <content type="text"><![CDATA[官网安装mac 上安装 redis 首先必须保证mac 已经安装 xcode. 因为make时要用到 Xcode 的command Tools . 下载 redis 1234$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz$ tar xzf redis-4.0.2.tar.gz$ cd redis-4.0.2$ make 修改文件夹名并编译12345$ mv redis-2.8.7 redis$ cd redis/$ sudo make$ sudo make test$ sudo make isntall 配置config1$ vim /usr/local/redis-4.0.2/redis.conf 找到dir ./这一行配置。此配置是将内存中的数据写入一个文件，这个数据库文件要保存到什么地方。我在mac根目录下创建了 /Users/***/develop/config/redis的文件夹（注意此文件夹必须有可读写权限）所以这一行的配置是 dir /Users/***/develop/config/redis修改后保存配置文件，同时将配置文件移动到 /etc 目录下.1sudo mv redis.conf /etc 上面第三步 make install成功后，你就应该在这个目录下看到redis1/usr/local/bin/redis-server 尝试启动一下 redis12cd /usr/local/bin./redis-server /etc/redis.conf conf文件相关配置 功能 操作实现 设置线程守护模式(后台启动) daemonize=yes 设置进程锁文件 pidfile /usr/local/redis/redis.pid port 6379 timeout 300 日志级别 loglevel debug 日志位置 logfile /usr/local/redis/log-redis.log 指定本地数据库路径 dir /usr/local/redis/db/ 设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id databases 8 注：标红参数要注意修改，否则注意查看报错日志，redis是否已启动 redis-cli命令总结 功能 命令 远程链接 redis-cli -h {host} -p {port} {command} 关闭 redis-cli shutdown homebrew安装1234567891011➜ bin brew install redis==&gt; Downloading https://homebrew.bintray.com/bottles/redis-4.0.10.high_sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring redis-4.0.10.high_sierra.bottle.tar.gz==&gt; CaveatsTo have launchd start redis now and restart at login: brew services start redisOr, if you don&apos;t want/need a background service you can just run: redis-server /usr/local/etc/redis.conf==&gt; Summary🍺 /usr/local/Cellar/redis/4.0.10: 13 files, 2.8MB]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac环境软件安装汇总]]></title>
    <url>%2Fblog%2F2018%2F12%2F20%2Fenvironment%2F</url>
    <content type="text"><![CDATA[开发环境HomebrewRed hat有yum，Ubuntu有apt-get而mac第三方支持：Homebrew简称brew， 是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件默认安装路径为：/usr/loacl/Cellar brew 相关命令 安装任意包 brew install [packageName] 安装wget brew install wget 卸载任意包 brew uninstall [packageName] 卸载git brew uninstall git 查询可用包 brew search [packageName] 查看已安装包列表 brew info [packageName] 删除该gem包 gem uninstall [gemname] 删除某指定版本gem gem uninstall [gemname] –version=[ver] 更新Homebrew brew update 查看Homebrew版本 brew -v [packageName] Homebrew帮助信息 brew -h [packageName] ruby(脚本语言)1234ruby -e &quot;$(curl -fsSL &lt;https://raw.githubusercontent.com/Homebrew/install/master/install&gt;)&quot; ==&gt;This script will install: /usr/local/bin/brew /usr/local/Library/... /usr/local/share/man/man1/brew.1 123456789Press RETURN to continue or any other key to abort ==&gt;Downloading and installing Homebrew... remote: Counting objects: 3693, done. remote: Compressing objects: 100% (3525/3525), done. remote: Total 3693 (delta 38), reused 527 (delta 27), pack-reused 0 Receiving objects: 100% (3693/3693), 3.04 MiB | 79.00 KiB/s, done. Resolving deltas: 100% (38/38), done. From &lt;https://github.com/Homebrew/homebrew&gt; [new branch] master -&gt; origin/master HEAD is now at 9c41fb8 update man page ==&gt;Installation successful! ==&gt; Next steps Run `brew help` to get started gem(ruby程序的包管理器类似Homebrew) 国内源站 gem 相关命令 查看源列表 gem sources -l 将源移除 gem sources –remove https://rubygems.org/ 添加国内源 gem sources –add https://gems.ruby-china.org/ 缓存 gem sources -u 查看gem安装环境（gem命令安装的软件在 GEM PATHS 中的lib path目录gems文件夹下） gem environment jekyll (git page)1gem install jekyll secureCRT123456789101、下载破解文件 securecrt_mac_crack.pl2、在终端执行命令。（请注意对应文件的目录） sudo perl ~/Downloads/securecrt_mac_crack.pl /Applications/SecureCRT.app/Contents/MacOS/SecureCRT等到出现了 crack successful就可以了，终端不要关闭3、打开SecureCRT，点击Enter License Data.. 输入刚才终端的数据就完成了破解，破解信息在刚才终端窗口，你的可能和我的不一样，以终端显示的为准。（请注意逐一拷贝，不要一次拷贝）Name: bleedfly Company: bleedfly.comSerial Number: 03-29-002542License Key: ADGB7V 9SHE34 Y2BST3 K78ZKF ADUPW4 K819ZW 4HVJCE P1NYRCIssue Date: 09-17-2013 launching rocket1A Mac PreferencePane for managing services with launchd.]]></content>
      <tags>
        <tag>Idea</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Little Redis Book]]></title>
    <url>%2Fblog%2F2018%2F12%2F20%2Fredisbook%2F</url>
    <content type="text"><![CDATA[The Little Redis Book (Free Book, 2012) by Karl Seguin is a great free and concise book that will get you started with Redis.本书为Redis官网推荐的免费书籍。 The Basics]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS系统目录]]></title>
    <url>%2Fblog%2F2018%2F12%2F18%2FmacOS%2F</url>
    <content type="text"><![CDATA[摘录自官方文档 目录 官方描述 简述 /Applications This directory is where you install apps intended for use by all users of a computer. The App Store installs apps purchased by the user in this directory automatically. app存储目录 Library There are multiple Library directories on the system, each one associated with a different domain or specific user. Apps should use the Library directory to store app-specific (or system-specific) resources. 资源目录，很多目录的子目录下都有关联的library /Network This directory contains the list of computers in the local area network. 网络相关 /System This directory contains the system resources required by macOS to run. These resources are provided by Apple and must not be modified.This directory comprises the contents of the system domain. macOS运行所需资源目录 /Users This directory contains one or more user home directories. The user home directory is where user-related files are stored. A typical user’s home directory includes the following subdirectories:Applications—Contains user-specific apps.Desktop—Contains the items on the user’s desktop.Downloads—Contains files downloaded from the Internet.Library—Contains user-specific app files (hidden in macOS 10.7 and later).Movies—Contains the user’s video files.Music—Contains the user’s music files.Pictures—Contains the user’s photos.Public—Contains content the user wants to share.Sites—Contains web pages used by the user’s personal site. (Web Sharing must be enabled to display these pages.) 用户目录 unix文件介绍 MAC下如何显示隐藏文件12345//在终端上输入以下命令 &gt; defaults write com.apple.finder AppleShowAllFiles -bool true//重新启动Finder &gt; 使用快捷键 Command + Option + esc或者执行 killall Finder命令 这样就可以显示隐藏文件了。//不显示隐藏文件的命令为 &gt; defaults write com.apple.finder AppleShowAllFiles -bool false同样也需要东西启动Finder才生效。]]></content>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本站 搭建教程]]></title>
    <url>%2Fblog%2F2018%2F12%2F15%2Fsite-doc%2F</url>
    <content type="text"><![CDATA[简介搭建博客的心由来已久，本篇文章为记录搭建过程。博客引擎 Hexo 模版 next，搭建系统环境为macOS MoJave 10.14.2，详细文档请移步官网。 配置安装环境 安装git 安装Node.js 安装Hexo 创建博客目录进入到要创建博客的工作目录，例如：$ cd /User/username/WorkSpaces123$ hexo init blog$ cd blog$ npm install blog目录结构 目录名称 描述 themes 主题安装目录 source 资源文件夹 source/_posts 文章资源文件夹 Hexo创建文件命令由于init命令是创建极简博客环境，所以标签tags、分类categories、关于about均没有对应目录，需要用到以下命令：1$ hexo new [layout] &lt;title&gt; 布局 layout 三种类型见官网123$ hexo new page tags$ hexo new page categories$ hexo new page about 创建完以上三个文件在 blog/source 目录下有对应文件生成，修改文件source/about/index.md中type类型为aboutsource/tags/index.md中type类型为tagssource/categories/index.md中type类型为categories 主题 下载nextHexo 官网有大量的主题提供下载，这里以 next 为例12$ cd blog$ git clone https://github.com/theme-next/hexo-theme-next themes/next 配置在下载完 next 主题之后，进入 themes/next目录，可以看到_config.yml文件 配置主题风格123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 以上四种主题风格可自行选择，详见官方文档 配置标签tags、分类categories、关于about目录123456789menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 取消tags、categories、about的注释 配置语言环境这里要注意配置语言环境需要在blog/_config.yml文件中配置，而在blog/themes/next/_config.yml中是不起作用的 12# language: enlanguage: zh-Hans 设置博客目录hexo在本地环境运行时将占用4000端口，地址为：http://localhost:4000，但是实际部署情况，你可能需要自定义根目录，例如：http://localhost:4000/blog 那么需要修改 _config.yml 文件中的 root: / 为 root: /blog 拓展功能 搜索 分享 脑图插件由于next主题本身并没有脑图插件，笔者这里使用可以转化markdown语法的百度kityminder插件为例配置next 根据 kityminder 的github仓库的介绍，安装 bower，及 kity 所有的依赖，找到生成的 kity.min.js 备用next 开发目录简介1234- layout //布局文件夹- scripts //脚本文件夹- source //资源文件夹 - lib //第三方库 加载js文件 在 source/lib 目录下，创建 kityminder 文件夹，copy kityminder.core.min.js， kity.min.js 至此 在 layout/_script/vendors.swig 文件中，添加如下内容： 1234&#123;% if theme.kityminder %&#125; &#123;% set js_vendors.kity = &apos;kityminder/kity.min.js?v=1.0.0&apos; %&#125; &#123;% set js_vendors.kityminder = &apos;kityminder/kityminder.core.min.js?v=1.0.0&apos; %&#125;&#123;% endif %&#125; 上步中的全局变量，需要配置在 _config.yml 中 12# minderkityminder: true 加载css样式 在 layout/_partials/head.siwg 文件中添加 1234&#123;% if theme.kityminder %&#125; &#123;% set kityminder_css_uri = url_for(theme.vendors._internal + &apos;/kityminder/kityminder.core.css?v=1.0.0&apos;) %&#125; &lt;link href=&quot;&#123;&#123; kityminder_css_uri &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&#123;% endif %&#125; 上步中的全局变量，需要配置在 _config.yml 中 12# minderkityminder: true 可能会遇到的问题：该插件配置完成之后，实际使用当中可能会调整css文件，由于用到pullquote代码块，所以需要修改source/css/_common/scaffolding/helpers.styl中pullquote样式 初始化 打开 layout/_layout.swig 文件在如下位置添加 12345...&#123;% include &apos;_third-party/scroll-cookie.swig&apos; %&#125;&#123;% include &apos;_third-party/exturl.swig&apos; %&#125;...&#123;% include &apos;_third-party/kityminder.swig&apos; %&#125; //添加 在 layout/_third-party下，添加第二步中的 kityminder.swig 文件，内容如下： 123&#123;% if theme.kityminder %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.js) &#125;&#125;/src/kityminder.js?v=&#123;&#123; theme.version &#125;&#125;&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 在 source/js/src下，添加第三步中的 kityminder.js 文件，用来初始化kityminder组件： 123456789101112$(document).ready(function()&#123; var minder = new kityminder.Minder(&#123; renderTo: &apos;.kitycontainer&apos; &#125;); var markdownText = $(&apos;.kitycontainer&apos;).text().trim(); $(&apos;.kitycontainer p&apos;).each(function(index, element) &#123; element.style.display = &apos;none&apos;; &#125;); minder.importData(&apos;markdown&apos;, markdownText); minder.disable(); minder.execCommand(&apos;hand&apos;);&#125;) 初始化完成后，可以通过hexo引用pullquote代码块（因为此代码块可以加载我们在js中初始化的容器 kity的kitycontainer class），实际效果如下 #example ##一级分支 ##一级分支 ###二级分支 ##一级分支 ##一级分支 ##一级分支 ##一级分支 ###二级分支 ####三级分支 本地部署hexo命令123$ hexo g // 生成静态文件$ hexo s // 启动服务可添加启动参数//访问地址 http://localhost:4000/ 服务器自动部署安装部署插件 hexo-deployer-git1$ npm install hexo-deployer-git --save 在blog/_config.yml中添加配置12345678910deploy: type: git // 单环境配置 repo: &lt;repository url&gt; // 多环境配置 repo: github: &lt;github repository url&gt; gitee: &lt;gitee repository url&gt; branch: [branch] message: [message] 配置完成执行命令hexo deploy]]></content>
  </entry>
  <entry>
    <title><![CDATA[git]]></title>
    <url>%2Fblog%2F2018%2F12%2F13%2Fgit%2F</url>
    <content type="text"><![CDATA[init1git init set up your git name and email123git config --local user.name clongcgit config --local user.email clongc1988@163.comgit remote add origin https://github.com/DeeMoxa/blog.git store user credential1git config credential.helper store add folder to my staging area1git add FOLDERNAME commit the folder1git commit -m &quot;add FOLDERNAME&quot; Clone1git clone https://github.com/clone Clone the repository at “REPOSITORY” to “my_cloned_repo”.1git clone https://github.com/clone my_cloned_repo status of someone in the files1git status rename move12git mv file_A.txt file_B.txtgit mv file_A.txt file_B.txt src investigate the log of repository1git log tag the current commit with ‘new_tag’1git tag &apos;new_tag&apos; push tag int remote repository1git push --tags origin master some files missing from the commit and add the missing file12git add missingfilegit commit --amend -m &apos;修正&apos; commit with The date1git commit --date=05.26.2017T15:00:00 -m anshitijiao unstage file under the situation of commit error1git reset HEAD fileName undo the last commit1git reset --soft HEAD~1 checkout the file from the last commit1git checkout FILENAME find the remote repository1git remote -v pull changes from origin repository1git pull origin master rebase location branch from origin/master and push it12345git rebase origin/master//git rebase onto A B C 把B到C段的commit 提交到A //p.s. rebase --onto的机制是左开右闭//即，不包含B 包含Cgit push origin master there have been modifications since your last commit . find out which line1git diff find out anybody modify the file1git blame FILENAME create new branch TEST1git branch TEST delete the branch1git branch -d BRANCHNAME merge the branch to the currently branch1git merge BRANCHNAME get origin but don’t merge it1git fetch origin reset HEAD origin by force.1234567git checkout .git fetch --allgit reset --hard origin/master// orgit fetch --all git reset --hard origin/mastergit pull]]></content>
  </entry>
  <entry>
    <title><![CDATA[Intellij Idea 使用常见问题总结]]></title>
    <url>%2Fblog%2F2018%2F12%2F13%2Fidea%2F</url>
    <content type="text"><![CDATA[Plugins 安装插件Settings/Preference ⌘, -&gt; Plugins -&gt; Install plugin from disk.. （选择下载完成的jar） 浏览插件Settings/Preference ⌘, -&gt; Plugins -&gt; Browse repositories.. ToolBars在工具栏添加自定义按钮（以添加git工具push按钮为例）Settings/Preference ⌘, -&gt; Appearance &amp; Behavior -&gt; Menus and Toolbars -&gt; Navigation Bar Toolbar -&gt; NavBarVcsGroup由于git组件按钮属于Navigation Bar所以在这里添加 通过Add After找到push按钮 mac下 idea debugger 加载慢的问题]]></content>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
</search>
